(define (problem hamilton)
  (:domain hamiltonian)
  (:objects n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 - vertex)
  (:init
    (connected n1 n2)
    (connected n2 n1)
    (connected n1 n4)
    (connected n4 n1)
    (connected n1 n5)
    (connected n5 n1)
    (connected n2 n3)
    (connected n3 n2)
    (connected n2 n6)
    (connected n6 n2)
    (connected n2 n9)
    (connected n9 n2)
    (connected n3 n4)
    (connected n4 n3)
    (connected n3 n11)
    (connected n11 n3)
    (connected n4 n7)
    (connected n7 n4)
    (connected n4 n10)
    (connected n10 n4)
    (connected n5 n6)
    (connected n6 n5)
    (connected n5 n7)
    (connected n7 n5)
    (connected n6 n8)
    (connected n8 n6)
    (connected n7 n8)
    (connected n8 n7)
    (connected n8 n9)
    (connected n9 n8)
    (connected n8 n10)
    (connected n10 n8)
    (connected n9 n11)
    (connected n11 n9)
    (connected n10 n11)
    (connected n11 n10)
    (= (path-length n1 n2) 5)
    (= (path-length n2 n1) 5)
    (= (path-length n1 n4) 5)
    (= (path-length n4 n1) 5)
    (= (path-length n1 n5) 3)
    (= (path-length n5 n1) 3)
    (= (path-length n2 n3) 5)
    (= (path-length n3 n2) 5)
    (= (path-length n2 n6) 2)
    (= (path-length n6 n2) 2)
    (= (path-length n2 n9) 2)
    (= (path-length n9 n2) 2)
    (= (path-length n3 n4) 5)
    (= (path-length n4 n3) 5)
    (= (path-length n3 n11) 3)
    (= (path-length n11 n3) 3)
    (= (path-length n4 n7) 2)
    (= (path-length n7 n4) 2)
    (= (path-length n4 n10) 2)
    (= (path-length n10 n4) 2)
    (= (path-length n5 n6) 1)
    (= (path-length n6 n5) 1)
    (= (path-length n5 n7) 1)
    (= (path-length n7 n5) 1)
    (= (path-length n6 n8) 1)
    (= (path-length n8 n6) 1)
    (= (path-length n7 n8) 1)
    (= (path-length n8 n7) 1)
    (= (path-length n8 n9) 1)
    (= (path-length n9 n8) 1)
    (= (path-length n8 n10) 1)
    (= (path-length n10 n8) 1)
    (= (path-length n9 n11) 1)
    (= (path-length n11 n9) 1)
    (= (path-length n10 n11) 1)
    (= (path-length n11 n10) 1)
    (visited n1)
    (at n1)
    (= (total-cost) 0)
  )
  (:goal (and
    (at n3)
    ; (forall (n) (visited n))
    (visited n1)
    (visited n2)
    (visited n3)
    (visited n4)
    (visited n5)
    (visited n6)
    (visited n7)
    (visited n8)
    (visited n9)
    (visited n10)
    (visited n11)
  ))
  (:metric minimize (total-cost))
)
